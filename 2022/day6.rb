
class Day6

  def initialize
    input = File.read('input/day6.txt').split()[0]

    puts part1(input)
    puts part2(input)
  end


  def part1(input)
    # find_unique_substring was entirely generated by ChatGPT with the following input :o
    # "Can you write a ruby program that given a string input, outputs the end location of the first substring containing 4 unique characters. For example in the string "mjqjpqmgbljsphdztnvjfqwrcgsmlb" it would output 7 (as the first unique substring, 'jpqm', ends on the 7th character"

    # This function takes in a string and returns the end location of the first substring
    # containing 4 unique characters.
    def find_unique_substring(input_string)
      # Iterate over the characters in the input string.
      input_string.each_char.with_index do |char, index|
        # Check if the substring starting from this character and extending for 4 characters
        # has 4 unique characters.
        if input_string[index..index+3].chars.uniq.size == 4
          # If so, return the end location of the substring
          return index + 3
        end
      end

      # If no unique substring of 4 characters was found, return -1.
      return -1
    end

    # This is the only code I had to write to get the correct answer. Technically as I asked for the function to output 7 for the example I shouldn't have had to add the '+ 1' but I'm not complaining..
    find_unique_substring(input) + 1
  end


  def part2(input)
    # find_unique_substring was entirely generated by ChatGPT with the following input
    # "Thanks. Can you write some code that does the same thing, but for the first 14 characters instead of 4."

    # This function takes in a string and returns the end location of the first substring
    # containing 14 unique characters.
    def find_unique_substring(input_string)
      # Iterate over the characters in the input string.
      input_string.each_char.with_index do |char, index|
        # Check if the substring starting from this character and extending for 14 characters
        # has 14 unique characters.
        if input_string[index..index+13].chars.uniq.size == 14
          # If so, return the end location of the substring.
          return index + 13
        end
      end

      # If no unique substring of 14 characters was found, return -1.
      return -1
    end

    # This is the only code I had to write to get the correct answer
    find_unique_substring(input) + 1
  end
end


Day6.new